[{"/Users/hiehn/slabs/bst-client/src/reportWebVitals.js":"1","/Users/hiehn/slabs/bst-client/src/index.js":"2","/Users/hiehn/slabs/bst-client/src/App.js":"3","/Users/hiehn/slabs/bst-client/src/Pages/BSTTree.js":"4","/Users/hiehn/slabs/bst-client/src/Pages/Color.js":"5","/Users/hiehn/slabs/bst-client/src/Pages/ColorButton.js":"6","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/index.js":"7","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/GraphUI.js":"8","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/ColorButton.js":"9","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/BSTTree.js":"10","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/Color.js":"11"},{"size":362,"mtime":1606502709315,"results":"12","hashOfConfig":"13"},{"size":547,"mtime":1606526932960,"results":"14","hashOfConfig":"15"},{"size":906,"mtime":1608571974370,"results":"16","hashOfConfig":"15"},{"size":3844,"mtime":1606622329752,"results":"17","hashOfConfig":"15"},{"size":1064,"mtime":1606594271845,"results":"18","hashOfConfig":"15"},{"size":605,"mtime":1606594365566,"results":"19","hashOfConfig":"15"},{"size":547,"mtime":1606526932960,"results":"20","hashOfConfig":"21"},{"size":8108,"mtime":1608789430276,"results":"22","hashOfConfig":"21"},{"size":605,"mtime":1606594365566,"results":"23","hashOfConfig":"21"},{"size":3839,"mtime":1608680981805,"results":"24","hashOfConfig":"21"},{"size":1064,"mtime":1606594271845,"results":"25","hashOfConfig":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1084a8y",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1dzqar5",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"19ype9n",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/hiehn/slabs/bst-client/src/reportWebVitals.js",[],["57","58"],"/Users/hiehn/slabs/bst-client/src/index.js",[],["59","60"],"/Users/hiehn/slabs/bst-client/src/App.js",["61","62"],"/Users/hiehn/slabs/bst-client/src/Pages/BSTTree.js",["63"],"import React from 'react';\nimport axios from 'axios';\nimport Tree from 'react-d3-tree';\n\nconst containerStyles = {\n    'width': '100%',\n    'height': '80vh',\n}\n\nexport class BSTTree extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: undefined,\n            tree: [{\n                name: '100',\n                children: []}\n                ],\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    createNewNode = (val) => {\n        return {\n            name: val.toString(),\n            children: [],\n            attributes: {\n            },\n            left: undefined,\n            right: undefined,\n        }\n    }\n\n    cloneTree = (root) => {\n        if (root == null) {\n            return null;\n        }\n\n        let newNode = this.createNewNode(root.value);\n        newNode.left = this.cloneTree(root.left);\n        let c1 = this.cloneTree(root.left);\n        let index =0;\n        if(c1) {\n            newNode.children[index] = c1\n            index++;\n        }\n        newNode.right = this.cloneTree(root.right);\n        let c2 = this.cloneTree(root.right);\n        if(c2){\n            newNode.children[index] = c2\n        }\n\n        return  newNode;\n    }\n\n    // bfTraveral = (node) => {\n    //     console.log(node)\n    //\n    //     let queue = []\n    //     queue.push(node)\n    //\n    //     while (queue.length > 0){\n    //         let curNode = queue.shift()\n    //         console.log(curNode.value)\n    //\n    //         if(curNode.left != undefined) {\n    //             queue.push(curNode.left)\n    //         }\n    //\n    //         if(curNode.right != undefined){\n    //             queue.push(curNode.right)\n    //         }\n    //    }\n    //\n    //    console.log('copyTree', this.copyTree)\n    // }\n\n\n    componentDidUpdate = async () => {\n        console.log('state was set')\n    }\n\n    componentDidMount = async () => {\n\n        const treeData = await axios.get(`http://localhost:8080/tree`);\n        let cloned = this.cloneTree(treeData.data.root)\n        let clonedTree = [JSON.parse(JSON.stringify(cloned))];\n        const dimensions = this.treeContainer.getBoundingClientRect();\n        this.setState({\n            ...this.state,\n            tree: clonedTree,\n            translate: {\n                x: dimensions.width / 2,\n                y: dimensions.height / 5,\n            }\n        });\n    }\n\n    handleChange(event) {\n        this.setState({...this.state, value: event.target.value});\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const addNodeResp = await axios.post(`http://localhost:8080/tree`, {'data': this.state.value});\n\n        const treeData = await axios.get(`http://localhost:8080/tree`);\n        let cloned = this.cloneTree(treeData.data.root)\n        let clonedTree = [JSON.parse(JSON.stringify(cloned))];\n        const dimensions = this.treeContainer.getBoundingClientRect();\n        this.setState({\n            ...this.state,\n            tree: clonedTree,\n            translate: {\n                x: dimensions.width / 2,\n                y: dimensions.height / 5,\n            }\n        });\n    }\n\n    render(){\n        return (\n            <div style={containerStyles} ref={tc => (this.treeContainer = tc)}>\n                <Tree data={this.state.tree} orientation={'vertical'} collapsible={false} translate={this.state.translate}  />\n\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        ADD NODE:\n                        <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            </div>\n        );\n    }\n}",["64","65"],"/Users/hiehn/slabs/bst-client/src/Pages/Color.js",[],["66","67"],"/Users/hiehn/slabs/bst-client/src/Pages/ColorButton.js",["68"],"import React from 'react';\n\nexport class ColorButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    componentDidMount = async () => {\n        //alert(this.props.color)\n    }\n\n    // handleColorChange = (color) => {\n    //     this.setState({...this.state, bgcolor: color})\n    // }\n\n    render(){\n        let color = {'background-color': this.state.bgcolor, 'height': '100vh',}\n        return  (<button onClick={() => { this.props.handleColorChange(this.props.color) }}>\n            {this.props.color}\n            </button>);\n    }\n}","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/index.js",[],["69","70"],"/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/GraphUI.js",["71"],"import React from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport axios from \"axios\";\nimport * as Tone from 'tone'\nimport uuid from 'react-uuid'\nimport { Midi } from '@tonejs/midi'\n\nexport class GraphUI extends React.Component {\n    SESSION_ID = undefined;\n    //API_ROOT = \"http://34.122.124.254:80/\"\n    API_ROOT = \"http://localhost:80/\"\n    PATH_ORIGIN = 0;\n    PATH_DESTINATION = 83;\n    synthStack = []\n    midi = undefined;\n    graphData = {}\n    chordCount = 0\n    chordIndex = 0\n\n    constructor() {\n        super();\n\n        this.SESSION_ID = uuid();\n\n        this.state = {\n            startBtn: {\n                isPlaying: false,\n                css: \"start-btn-overlay-show\",\n            },\n            divStyle: {\n                color: 'blue',\n            },\n            loading: true,\n            data:{\n                idkeychordmap: {},\n                chordpathids: [0],\n                nodes: [\n                    {\n                    \"id\": 99,\n                    \"hkey\": \"as\",\n                    \"note\": \"as\",\n                    \"chord\": \"maj7\",\n                    \"keyAndNote\": \"as,as-maj7\",\n                    \"color\": \"pink\",\n                    \"labelText\": \"as,as-maj7\"\n                },\n\n                ],\n                links: [],\n            },\n            myConfig: {\n                initialZoom: 1,\n                height: 900,\n                width: 1200,\n                //nodeHighlightBehavior: true,\n                node: {\n                    labelProperty: (node) => {\n                        return node.labelText\n                    },\n                    renderLabel: true,\n                    size: 120,\n                    highlightStrokeColor: \"black\",\n                },\n                link: {\n                    highlightColor: \"lightblue\",\n                },\n            }\n        }\n    }\n\n\n\n\n\n\n    loadGraphData = async () => {\n        let max = 83;\n        let min = 0;\n        this.PATH_DESTINATION = Math.floor(Math.random() * (max - min + 1) + min);\n\n        let resp = await axios.get(`${this.API_ROOT}graph/${this.SESSION_ID}/${this.PATH_ORIGIN}/${this.PATH_DESTINATION}`)\n        this.graphData = resp.data;\n        this.PATH_ORIGIN = resp.data.destination;\n    }\n\n    loadMidiData = async () => {\n        this.midi = await Midi.fromUrl(`${this.API_ROOT}${this.graphData.midi}`);\n    }\n\n    renderGraph = async () => {\n        this.setState( {...this.state, data: this.graphData, loading: false})\n    }\n\n    initAudio = async () => {\n        if(this.state.startBtn.isPlaying) {\n            return;\n        }\n\n        this.setState({...this.state, startBtn: {\n            isPlaying: true,\n            css: \"start-btn-overlay-hide\",\n        }})\n\n        await this.loadGraphData();\n        await this.loadMidiData();\n        await this.startSeqence();\n        await this.renderGraph();\n\n        Tone.Transport.bpm.value = 60\n        Tone.Transport.start();\n    }\n\n    startSeqence = async () => {\n        if(this.synthStack.length > 0) {\n            console.log('this.synthStack.length', this.synthStack.length)\n            this.synthStack[this.synthStack.length-1].unsync();\n            //this.synthStack[this.synthStack.length-1].dispose();\n        }\n\n        let curSynth = new Tone.PolySynth(Tone.AMSynth);\n        this.synthStack.push(curSynth);\n\n        curSynth.toDestination();\n        curSynth.volume.value = -20;\n\n        const track = this.midi.tracks[0];\n        const notes = track.notes\n\n        //let chordCount = 0;\n        let curTime = -1;\n        for(let i = 0; i < notes.length; i++){\n           if(i == notes.length-1) {\n               console.log(\"NOTE TIME: \", notes[i])\n               console.log(\"NOTE TIME: \", notes[i].time)\n               console.log(\"NOTE DUR: \", notes[i].duration)\n           }\n\n           if(notes[i].time !== curTime){\n               curTime = notes[i].time;\n               this.chordCount++;\n           }\n\n           curSynth.triggerAttackRelease(notes[i].name, notes[i].duration, Tone.now() + notes[i].time, 0.5)\n        }\n\n\n\n        //the control changes are an object\n        //the keys are the CC number\n        //track.controlChanges[64]\n        //they are also aliased to the CC number's common name (if it has one)\n        // track.controlChanges.sustain.forEach(cc => {\n        //     // cc.ticks, cc.value, cc.time\n        // })\n\n        // var tremolo = new Tone.Tremolo(4, 0.75).toDestination().start();\n        // var phaser = new Tone.Phaser({\n        //     \"frequency\" : 6,\n        //     \"octaves\" : 5,\n        //     \"baseFrequency\" : 1000\n        // }).toMaster();\n        // const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n        // const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n        //\n        // synth.chain(pingPong, autoWah, phaser, tremolo)\n\n        //alert(notes.length)\n\n        // Tone.Transport.scheduleOnce(async () => {\n        //     console.log(\"Half FINISHED\")\n        //     //START LOADING THE GRAPH DATA HALFWAY THROUGH CURRENT PROGRESSION\n        //     await this.loadGraphData();\n        // }, (Tone.now() + notes[notes.length-1].time + notes[notes.length-1].duration) / 2)\n\n        // Tone.Transport.scheduleOnce(async () => {\n        //     alert(\"FINISHED\")\n        //     //START LOADING THE GRAPH DATA HALFWAY THROUGH CURRENT PROGRESSION\n        //     await this.loadGraphData();\n        // }, (Tone.now() + notes[notes.length-1].time) + notes[notes.length-1].duration))\n\n        console.log(\"TIME.NOW(): \", Tone.now())\n        console.log(\"CHORD COUNT: \", this.chordCount)\n\n        for(let i=0; i<this.chordCount; i++){\n            console.log(\"SLOOP: \", i)\n            Tone.Transport.scheduleOnce(async () => {\n               console.log(\"SCHEDULED: \", this.state.data.chordpathids[i] + \"m\")\n            }, new Tone.Time(i + \"m\"));\n        }\n\n        Tone.Transport.scheduleOnce(async () => {\n            console.log(\"LOAD DATA\")\n            //START THE NEW PROGRESSION AT THE END OF THE LAST\n            await this.loadGraphData();\n            await this.loadMidiData();\n        }, new Tone.Time((this.chordCount - 1) + \":0:0\"));\n\n        Tone.Transport.scheduleOnce(async () => {\n            //START THE NEW PROGRESSION AT THE END OF THE LAST\n            console.log(\"ALL FINISHED\")\n\n            await this.startSeqence();\n            await this.renderGraph();\n        }, new Tone.Time((this.chordCount) + \":0:0\"));\n\n\n\n\n\n\n\n           //  console.log(\"midi\", midi)\n           //\n           //  // make sure you set the tempo before you schedule the events\n           //  Tone.Transport.bpm.value = 60\n           //\n           //\n           //  // pass in the note events from one of the tracks as the second argument to Tone.Part\n           //  var midiPart = new Tone.Part(function(time, note) {\n           //\n           //      //use the events to play the synth\n           //      synth.triggerAttackRelease(note.name, note.duration, time, 0.5)\n           //\n           //  }, midi.tracks[0].notes).start()\n           //\n\n\n\n    }\n\n    async componentDidMount() {\n        let max = 83;\n        let min = 0;\n        this.PATH_DESTINATION = Math.floor(Math.random() * (max - min + 1) + min);\n\n        let resp = await axios.get(`${this.API_ROOT}graph/${this.SESSION_ID}/${this.PATH_ORIGIN}/${this.PATH_DESTINATION}`);\n        this.PATH_ORIGIN = resp.data.destination;\n\n        this.setState({...this.state, data: resp.data, loading: false})\n    }\n\n    render() {\n        return <div style={this.state.divStyle} className={this.state.startBtn.css} onClick={this.initAudio}>\n            <div>\n                CHORD PATH IDS: {this.state.data.chordpathids.join(\",\")}\n                Destination: {this.state.data.idkeychordmap[this.PATH_DESTINATION]}\n            </div>\n            {\n                this.state.loading ? <div>Loading...</div> : <Graph\n                    id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n                    data={this.state.data}\n                    config={this.state.myConfig}\n                />\n            }\n        </div>\n    }\n}\n\n\n\n","/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/ColorButton.js",["72"],"/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/BSTTree.js",["73"],"/Users/hiehn/TrebleMakerKeyPath/keypath-client/src/Pages/Color.js",[],["74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":2,"column":41,"nodeType":"84","messageId":"85","endLine":2,"endColumn":45},{"ruleId":"82","severity":1,"message":"86","line":5,"column":8,"nodeType":"84","messageId":"85","endLine":5,"endColumn":17},{"ruleId":"82","severity":1,"message":"87","line":108,"column":15,"nodeType":"84","messageId":"85","endLine":108,"endColumn":26},{"ruleId":"76","replacedBy":"88"},{"ruleId":"78","replacedBy":"89"},{"ruleId":"76","replacedBy":"90"},{"ruleId":"78","replacedBy":"91"},{"ruleId":"82","severity":1,"message":"92","line":20,"column":13,"nodeType":"84","messageId":"85","endLine":20,"endColumn":18},{"ruleId":"76","replacedBy":"93"},{"ruleId":"78","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":132,"column":17,"nodeType":"97","messageId":"98","endLine":132,"endColumn":19},{"ruleId":"82","severity":1,"message":"92","line":20,"column":13,"nodeType":"84","messageId":"85","endLine":20,"endColumn":18},{"ruleId":"82","severity":1,"message":"87","line":108,"column":15,"nodeType":"84","messageId":"85","endLine":108,"endColumn":26},{"ruleId":"76","replacedBy":"99"},{"ruleId":"78","replacedBy":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],["101"],["102"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ListGroup' is defined but never used.","'addNodeResp' is assigned a value but never used.",["101"],["102"],["101"],["102"],"'color' is assigned a value but never used.",["101"],["102"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["101"],["102"],"no-global-assign","no-unsafe-negation"]