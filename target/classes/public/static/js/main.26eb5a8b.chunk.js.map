{"version":3,"sources":["Synths/SynthProducer.js","Pages/GraphUI.js","App.js","reportWebVitals.js","index.js"],"names":["SynthProducer","selection","Math","floor","random","this","getBassSynth","bassSynth","Tone","toDestination","volume","value","synth","getChordSynth","chordSynth","tremolo","start","phaser","autoWah","pingPong","chain","autoFilter","feedbackDelay","chorus","reverb","getTrebleSynth","trebleSynth","pingPong1","reverb1","GraphUI","SESSION_ID","undefined","API_ROOT","PATH_ORIGIN","PATH_DESTINATION","synthChordStack","synthBassStack","synthTrebleStack","midi","graphData","chordCount","chordIndex","tonePlayers","currentLoop","currentTrebleSynth","currentChordSynth","currentBassSynth","loadAudioFile","a","loopSelection","state","shuffleSounds","loop","audioPlayer","set","push","loadGraphData","axios","get","resp","data","destination","loadMidiData","Midi","fromUrl","renderGraph","setState","loading","initAudio","startBtn","isPlaying","css","startSeqence","bpm","disposedUnused","noteTriggerTimeCache","chords","SYNTH_PRODUCER","getRandomChordSynth","track","tracks","notes","curTime","i","length","time","t","preventTimeCollision","triggerAttackRelease","name","duration","bass","getRandomBassSynth","treble","getRandomTrebleSynth","scheduleOnce","j","nodes","id","chordpathids","size","color","uuid","divStyle","idkeychordmap","links","myconfig","initialZoom","width","getWidth","height","getHeight","nodeHighlightBehavior","node","labelPosition","labelProperty","strokeColor","strokeWidth","fontColor","renderLabel","highlightStrokeColor","updateWindowDimensions","bind","shouldShuffle","unsync","disposed","dispose","timeCache","includes","window","addEventListener","removeEventListener","innerHeight","outerWidth","startText","keyChord","split","chordNoteType","toUpperCase","key","getColorFromKey","style","className","onClick","background","getStartColor","getStartText","getDestinationColor","getDestinationText","config","React","Component","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26eb5a8b.chunk.js","sourcesContent":["import * as Tone from \"tone\";\n\nexport default class SynthProducer {\n    getRandomBassSynth() {\n        const numOfSynths = 4;\n        const selection = Math.floor(Math.random() * numOfSynths);\n        return this.getBassSynth(selection);\n    }\n\n    getBassSynth(selection) {\n        let bassSynth;\n        switch (selection) {\n            case 0:\n                bassSynth = new Tone.AMSynth();\n                bassSynth.toDestination();\n                bassSynth.volume.value = -8;\n\n                return {selection: selection, synth: bassSynth};\n            case 1:\n                bassSynth = new Tone.FMSynth();\n                bassSynth.toDestination();\n                bassSynth.volume.value = -15;\n\n                return {selection: selection, synth: bassSynth};\n            case 2:\n                bassSynth = new Tone.MonoSynth();\n                bassSynth.toDestination();\n                bassSynth.volume.value = -25;\n\n                return {selection: selection, synth: bassSynth};\n            case 3:\n                bassSynth = new Tone.Synth();\n                bassSynth.toDestination();\n                bassSynth.volume.value = -10;\n\n                return {selection: selection, synth: bassSynth};\n        }\n    }\n\n    getRandomChordSynth() {\n        const numOfSynths = 3;\n        const selection = Math.floor(Math.random() * numOfSynths);\n        return this.getChordSynth(selection);\n    }\n\n    getChordSynth(selection) {\n        let chordSynth;\n        switch (selection) {\n            case 0:\n                chordSynth = new Tone.AMSynth().toDestination();\n                chordSynth.volume.value = -30;\n\n                const tremolo = new Tone.Tremolo(4, 0.75).toDestination().start();\n                const phaser = new Tone.Phaser({\n                    \"frequency\": 6,\n                    \"octaves\": 5,\n                    \"baseFrequency\": 1000\n                }).toDestination();\n                const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n                const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n\n                chordSynth.chain(pingPong, autoWah, phaser, tremolo);\n                return {selection: selection, synth: chordSynth};\n            case 1:\n                chordSynth = new Tone.PolySynth().toDestination();\n                chordSynth.volume.value = -20;\n\n                const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n                const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n\n                chordSynth.chain(autoFilter, feedbackDelay);\n                return {selection: selection, synth: chordSynth};\n            case 2:\n                chordSynth = new Tone.PolySynth().toDestination();\n                chordSynth.volume.value = -40;\n\n                const chorus = new Tone.Chorus(4, 2.5, 0.5);\n                const reverb = new Tone.JCReverb(0.7).toDestination();\n\n                chordSynth.chain(chorus, reverb);\n                return {selection: selection, synth: chordSynth};\n        }\n    }\n\n    getRandomTrebleSynth() {\n        const numOfSynths = 4;\n        const selection = Math.floor(Math.random() * numOfSynths);\n        return this.getTrebleSynth(selection);\n    }\n\n    getTrebleSynth(selection) {\n        let trebleSynth;\n        switch (selection) {\n            case 0:\n                trebleSynth = new Tone.AMSynth().toDestination();\n                trebleSynth.volume.value = -30;\n\n                const tremolo = new Tone.Tremolo(4, 0.75).toDestination().start();\n                const phaser = new Tone.Phaser({\n                    \"frequency\": 6,\n                    \"octaves\": 5,\n                    \"baseFrequency\": 1000\n                }).toDestination();\n                const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n                const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n\n                trebleSynth.chain(pingPong, autoWah, phaser, tremolo);\n\n                return {selection: selection, synth: trebleSynth};\n            case 1:\n                trebleSynth = new Tone.PolySynth().toDestination();\n                trebleSynth.volume.value = -30;\n\n                const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n                // const cheby = new Tone.Chebyshev(50).toDestination();\n                const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n\n                trebleSynth.chain(autoFilter, feedbackDelay);\n\n                return {selection: selection, synth: trebleSynth};\n            case 2:\n                trebleSynth = new Tone.MonoSynth().toDestination();\n                trebleSynth.volume.value = -40;\n\n                //const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n                // const cheby = new Tone.Chebyshev(50).toDestination();\n                // const chorus = new Tone.Chorus(4, 2.5, 0.5);\n                const reverb = new Tone.JCReverb(0.8).toDestination();\n                //const shift = new Tone.FrequencyShifter(42).toDestination();\n                // const autoWah1 = new Tone.AutoWah(50, 6, -30).toDestination();\n                const pingPong1 = new Tone.PingPongDelay(\"4n\", 0.1).toDestination();\n\n                trebleSynth.chain(pingPong1, reverb);\n\n                return {selection: selection, synth: trebleSynth};\n            case 3:\n                trebleSynth = new Tone.MembraneSynth().toDestination();\n                trebleSynth.volume.value = -50;\n\n                //const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n                // const cheby = new Tone.Chebyshev(50).toDestination();\n                // const chorus = new Tone.Chorus(4, 2.5, 0.5);\n                const reverb1 = new Tone.JCReverb(0.8).toDestination();\n                //const shift = new Tone.FrequencyShifter(42).toDestination();\n                // const autoWah1 = new Tone.AutoWah(50, 6, -30).toDestination();\n                // const pingPong2 = new Tone.PingPongDelay(\"4n\", 0.1).toDestination();\n                // const feedbackDelay1 = new Tone.FeedbackDelay(\"1m\", 0.1).toDestination();\n                // const tremol1 = new Tone.Tremolo(4, 0.75).toDestination().start();\n                trebleSynth.chain(reverb1);\n\n                return {selection: selection, synth: trebleSynth};\n        }\n    }\n}\n","import React from 'react';\nimport {Graph} from \"react-d3-graph\";\nimport axios from \"axios\";\nimport * as Tone from 'tone'\nimport uuid from 'react-uuid'\nimport {Midi} from '@tonejs/midi'\nimport SynthProducer from \"../Synths/SynthProducer\";\n\nexport class GraphUI extends React.Component {\n    SESSION_ID = undefined;\n    // API_ROOT = \"http://34.122.124.254:80/\"\n    API_ROOT = \"http://localhost:80/\"\n    PATH_ORIGIN = 0;\n    PATH_DESTINATION = 83;\n    synthChordStack = [];\n    synthBassStack = [];\n    synthTrebleStack = [];\n    midi = undefined;\n    graphData = {}\n    chordCount = 0;\n    chordIndex = 0;\n    SYNTH_PRODUCER;\n    tonePlayers = [];\n\n    currentLoop = -1;\n    currentTrebleSynth = -1;\n    currentChordSynth = -1;\n    currentBassSynth = -1;\n\n    constructor() {\n        super();\n\n        this.SESSION_ID = uuid();\n\n        this.state = {\n            shuffleSounds: {\n                loop: true,\n                treble: true,\n                chords: true,\n                bass: true,\n            },\n            startBtn: {\n                isPlaying: false,\n                css: \"start-btn-overlay-show\",\n            },\n            divStyle: {\n                color: 'blue',\n            },\n            loading: true,\n            data: {\n                idkeychordmap: {},\n                chordpathids: [0],\n                nodes: [\n                    {\n                        \"id\": 99,\n                        \"hkey\": \"a#\",\n                        \"note\": \"a#\",\n                        \"chord\": \"maj7\",\n                        \"keyAndNote\": \"a#,a#-maj7\",\n                        \"color\": \"pink\",\n                        \"labelText\": \"a#,a#-maj7\"\n                    },\n                ],\n                links: [],\n            },\n            myconfig: {\n                initialZoom: 1,\n                width: this.getWidth(),\n                height: this.getHeight(),\n                nodeHighlightBehavior: false,\n                node: {\n                    labelPosition: 'center',\n                    labelProperty: \"labelText\",\n                    strokeColor: \"grey\",\n                    strokeWidth: 1,\n                    fontColor: \"grey\",\n                    renderLabel: true,\n                    size: 850,\n                    highlightStrokeColor: \"white\",\n                },\n            }\n        }\n\n        this.SYNTH_PRODUCER = new SynthProducer();\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    loadAudioFile = async () => {\n        let loopSelection = this.currentLoop;\n        if(this.state.shuffleSounds.loop) {\n            loopSelection = this.API_ROOT + \"output/loops/\" + Math.floor(Math.random() * 27) + \"-loop.mp3\";\n            this.currentLoop = loopSelection;\n        }\n\n        const audioPlayer = new Tone.Player(loopSelection).toDestination();\n        audioPlayer.set({\n            volume: -20,\n        });\n\n        this.tonePlayers.push(audioPlayer);\n    }\n\n    loadGraphData = async () => {\n        let max = 83;\n        let min = 0;\n        this.PATH_DESTINATION = Math.floor(Math.random() * (max - min + 1) + min);\n\n        let resp = await axios.get(`${this.API_ROOT}graph/${this.SESSION_ID}/${this.PATH_ORIGIN}/${this.PATH_DESTINATION}`)\n        this.graphData = resp.data.data;\n        this.PATH_ORIGIN = resp.data.data.destination;\n    }\n\n    loadMidiData = async () => {\n        this.midi = await Midi.fromUrl(`${this.API_ROOT}${this.graphData.midi}`);\n    }\n\n    renderGraph = async () => {\n        this.setState({...this.state, data: this.graphData, loading: false})\n    }\n\n    initAudio = async () => {\n        if (this.state.startBtn.isPlaying) {\n            return;\n        }\n\n        this.setState({\n            ...this.state, startBtn: {\n                isPlaying: true,\n                css: \"start-btn-overlay-hide\",\n            }\n        })\n\n        await this.loadAudioFile();\n        await this.loadGraphData();\n        await this.loadMidiData();\n        await this.renderGraph();\n        await this.startSeqence();\n\n        Tone.Transport.bpm.value = 60\n        Tone.Transport.start();\n    }\n\n    startSeqence = async () => {\n        this.disposedUnused();\n\n        let noteTriggerTimeCache = [];\n\n        //SELECT CHORD SYNTH\n        let chordSynth = undefined;\n        if(this.state.shuffleSounds.chords){\n            const {selection, synth} = this.SYNTH_PRODUCER.getRandomChordSynth();\n            this.currentChordSynth = selection;\n            chordSynth = synth;\n        } else {\n            const {selection, synth} = this.SYNTH_PRODUCER.getChordSynth(this.currentChordSynth);\n            this.currentChordSynth = selection;\n            chordSynth = synth;\n        }\n        this.synthChordStack.push(chordSynth);\n\n        //SCHEDULE CHORD NOTES\n        let track = this.midi.tracks[0];\n        let notes = track.notes\n        let curTime = -1;\n        for (let i = 0; i < notes.length; i++) {\n            if (notes[i].time !== curTime) {\n                curTime = notes[i].time;\n                this.chordCount++;\n            }\n            const t = this.preventTimeCollision(Tone.now() + notes[i].time, noteTriggerTimeCache);\n            chordSynth.triggerAttackRelease(notes[i].name, notes[i].duration, t, 0.5)\n        }\n\n        //SELECT BASS SYNTH\n        let bassSynth = undefined;\n        if(this.state.shuffleSounds.bass){\n            const {selection, synth} = this.SYNTH_PRODUCER.getRandomBassSynth();\n            this.currentBassSynth = selection;\n            bassSynth = synth;\n        } else {\n            const {selection, synth} = this.SYNTH_PRODUCER.getBassSynth(this.currentBassSynth);\n            this.currentBassSynth = selection;\n            bassSynth = synth;\n        }\n        this.synthBassStack.push(bassSynth);\n\n        //SCHEDULE BASS NOTES\n        track = this.midi.tracks[1];\n        notes = track.notes\n        curTime = -1;\n        for (let i = 0; i < notes.length; i++) {\n            if (notes[i].time !== curTime) {\n                curTime = notes[i].time;\n            }\n            const t = this.preventTimeCollision(Tone.now() + notes[i].time, noteTriggerTimeCache);\n            bassSynth.triggerAttackRelease(notes[i].name, notes[i].duration, t, 0.5)\n        }\n\n        //SELECT TREBLE SYNTH\n        let trebleSynth = undefined;\n        if(this.state.shuffleSounds.treble){\n            const {selection, synth} = this.SYNTH_PRODUCER.getRandomTrebleSynth();\n            this.currentTrebleSynth = selection;\n            trebleSynth = synth;\n        } else {\n            const {selection, synth} = this.SYNTH_PRODUCER.getTrebleSynth(this.currentBassSynth);\n            this.currentTrebleSynth = selection;\n            trebleSynth = synth;\n        }\n        this.synthTrebleStack.push(trebleSynth);\n\n        //SCHEDULE TREBLE NOTES\n        track = this.midi.tracks[2];\n        notes = track.notes\n        curTime = -1;\n        for (let i = 0; i < notes.length; i++) {\n            if (notes[i].time !== curTime) {\n                curTime = notes[i].time;\n            }\n            const t = this.preventTimeCollision(Tone.now() + notes[i].time, noteTriggerTimeCache);\n            trebleSynth.triggerAttackRelease(notes[i].name, notes[i].duration, t, 0.5)\n        }\n\n        //SCHEDULE DRUM LOOP TRIGGERS\n        //SCHEDULE NODE UI UPDATES\n        for (let i = 0; i < this.state.data.chordpathids.length + 1; i++) {\n            Tone.Transport.scheduleOnce(async () => {\n                this.tonePlayers[this.tonePlayers.length - 1].start();\n\n                for (let j = 0; j < this.state.data.nodes.length; j++) {\n                    if (this.state.data.nodes[j].id === this.state.data.chordpathids[i]) {\n                        this.state.data.nodes[j].size = 800;\n                        this.state.data.nodes[j].color = \"white\";\n\n                        this.setState({...this.state.data, nodes: this.state.data.nodes})\n                        break;\n                    }\n                }\n            }, this.preventTimeCollision(\n                new Tone.Time((this.chordCount - this.state.data.chordpathids.length) + i + \":0:0\"),\n                noteTriggerTimeCache));\n        }\n\n        Tone.Transport.scheduleOnce(async () => {\n            //START THE NEW PROGRESSION AT THE END OF THE LAST\n            this.shuffleSounds();\n            await this.loadAudioFile();\n            await this.loadGraphData();\n            await this.loadMidiData();\n        }, this.preventTimeCollision(new Tone.Time((this.chordCount - 1) + \":0:0\"), noteTriggerTimeCache));\n\n        Tone.Transport.scheduleOnce(async () => {\n            //START THE NEW PROGRESSION AT THE END OF THE LAST\n            await this.renderGraph();\n            await this.startSeqence();\n        }, this.preventTimeCollision(new Tone.Time((this.chordCount) + \":0:0\"), noteTriggerTimeCache));\n    }\n\n    shouldShuffle() {\n        return Math.random() < 0.5\n    }\n\n    shuffleSounds() {\n        this.setState({\n            ...this.state, shuffleSounds: {\n                loop: this.shouldShuffle(),\n                treble: this.shouldShuffle(),\n                chords: this.shouldShuffle(),\n                bass: this.shouldShuffle(),\n            }\n        })\n    }\n\n    disposedUnused() {\n        if (this.synthChordStack.length > 0) {\n            this.synthChordStack[this.synthChordStack.length - 1].unsync();\n            if (this.synthChordStack.length > 1) {\n                if (!this.synthChordStack[this.synthChordStack.length - 2].disposed) {\n                    this.synthChordStack[this.synthChordStack.length - 2].dispose();\n                }\n            }\n        }\n\n        if (this.synthBassStack.length > 0) {\n            this.synthBassStack[this.synthBassStack.length - 1].unsync();\n            if (this.synthBassStack.length > 1) {\n                if (!this.synthBassStack[this.synthBassStack.length - 2].disposed) {\n                    this.synthBassStack[this.synthBassStack.length - 2].dispose();\n                }\n            }\n        }\n\n        if (this.synthTrebleStack.length > 0) {\n            this.synthTrebleStack[this.synthTrebleStack.length - 1].unsync();\n            if (this.synthTrebleStack.length > 1) {\n                if (!this.synthTrebleStack[this.synthTrebleStack.length - 2].disposed) {\n                    this.synthTrebleStack[this.synthTrebleStack.length - 2].dispose();\n                }\n            }\n        }\n\n        if (this.tonePlayers.length > 1) {\n            if (!this.tonePlayers[this.tonePlayers.length - 2].disposed) {\n                this.tonePlayers[this.tonePlayers.length - 2].dispose();\n            }\n        }\n    }\n\n    preventTimeCollision(time, timeCache) {\n        if (timeCache.includes(time)) {\n            time = time + 0.00001;\n        }\n\n        timeCache.push(time)\n        return time\n    }\n\n    async componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n\n        let max = 83;\n        let min = 0;\n        this.PATH_DESTINATION = Math.floor(Math.random() * (max - min + 1) + min);\n\n        let resp = await axios.get(`${this.API_ROOT}graph/${this.SESSION_ID}/${this.PATH_ORIGIN}/${this.PATH_DESTINATION}`);\n        this.PATH_ORIGIN = resp.data.data.destination;\n\n        //set browser dims\n        resp.data.myconfig.width = this.getWidth();\n        resp.data.myconfig.height = this.getHeight();\n\n        this.setState({...this.state, data: resp.data.data, myconfig: resp.data.myconfig, loading: false})\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({...this.state.myconfig, width: this.getWidth(), height: this.getHeight()});\n    }\n\n    getHeight() {\n        return window.innerHeight;\n    }\n\n    getWidth() {\n        return window.outerWidth;\n    }\n\n    getStartText() {\n        if (this.state.data.chordpathids === undefined) {\n            return \"\";\n        }\n\n        let startText = [\"\", \"\"];\n        const keyChord = this.state.data.idkeychordmap[this.state.data.chordpathids[0]];\n        if (keyChord) {\n            startText = keyChord.split(',');\n        }\n\n        let chordNoteType = [\"\", \"\"]\n        if (startText[1]) {\n            chordNoteType = startText[1].split('-');\n        }\n\n        return chordNoteType[0].toUpperCase() + chordNoteType[1];\n    }\n\n    getDestinationText() {\n        if (!this.state.data.idkeychordmap) {\n            return \"\";\n        }\n\n        let startText = [\"\", \"\"];\n        const keyChord = this.state.data.idkeychordmap[this.PATH_DESTINATION];\n        if (keyChord) {\n            startText = keyChord.split(',');\n        }\n\n        let chordNoteType = [\"\", \"\"]\n        if (startText[1]) {\n            chordNoteType = startText[1].split('-');\n        }\n\n        return chordNoteType[0].toUpperCase() + chordNoteType[1];\n    }\n\n    getColorFromKey(key) {\n        switch (key) {\n            case \"a\":\n                return \"green\";\n            case \"a#\":\n                return \"pink\";\n            case \"b\":\n                return \"yellow\";\n            case \"c\":\n                return \"orange\";\n            case \"c#\":\n                return \"black\";\n            case \"d\":\n                return \"red\";\n            case \"d#\":\n                return \"maroon\";\n            case \"e\":\n                return \"teal\";\n            case \"f\":\n                return \"brown\";\n            case \"f#\":\n                return \"purple\";\n            case \"g\":\n                return \"lime\";\n            case \"g#\":\n                return \"blue\";\n            default:\n                return ''\n        }\n    }\n\n    getStartColor() {\n        if (this.state.data.chordpathids === undefined) {\n            return \"\";\n        }\n\n        let startText = [\"\", \"\"];\n        const keyChord = this.state.data.idkeychordmap[this.state.data.chordpathids[0]];\n        if (keyChord !== undefined) {\n            startText = keyChord.split(',');\n        }\n\n        return this.getColorFromKey(startText[0])\n    }\n\n    getDestinationColor() {\n        if (this.state.data.chordpathids === undefined) {\n            return \"\";\n        }\n\n        let startText = [\"\", \"\"];\n        const keyChord = this.state.data.idkeychordmap[this.PATH_DESTINATION];\n        if (keyChord !== undefined) {\n            startText = keyChord.split(',');\n        }\n\n        return this.getColorFromKey(startText[0])\n    }\n\n    render() {\n        return <div style={this.state.divStyle} className={this.state.startBtn.css} onClick={this.initAudio}>\n            <div className=\"bottomright\">\n                <div className=\"bottomborder\">\n                    <div className=\"bottomrightcircle\" style={{background: this.getStartColor()}}></div>\n                    <div className=\"bottomtext\">&nbsp;{this.getStartText()}</div>\n                </div>\n                <div className=\"emoji\">➡️</div>\n                <div className=\"bottomborder\">\n                    <div className=\"bottomrightcircle\" style={{background: this.getDestinationColor()}}></div>\n                    <div className=\"bottomtext\">&nbsp;{this.getDestinationText()}</div>\n                </div>\n            </div>\n            {\n                this.state.loading ? <div>Loading...</div> : <Graph\n                    id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n                    data={this.state.data}\n                    config={this.state.myconfig}\n                />\n            }\n            <div className=\"bottomleft\">\n                <ol className=\"custom-bullet medals\">\n                    <li><b>A</b> major</li>\n                    <li><b>A#</b> major</li>\n                    <li><b>B</b> major</li>\n                    <li><b>C</b> major</li>\n                    <li><b>C#</b> major</li>\n                    <li><b>D</b> major</li>\n                    <li><b>D#</b> major</li>\n                    <li><b>E</b> major</li>\n                    <li><b>F</b> major</li>\n                    <li><b>F#</b> major</li>\n                    <li><b>G</b> major</li>\n                    <li><b>G#</b> major</li>\n                </ol>\n            </div>\n        </div>\n    }\n}\n\n\n\n","import './App.css';\nimport {Route, BrowserRouter as Router, Link} from \"react-router-dom\";\nimport {GraphUI} from './Pages/GraphUI'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                {/*<ListGroup horizontal>*/}\n                {/*    <ListGroup.Item><Link to=\"/\">HOME</Link></ListGroup.Item>*/}\n                {/*    <ListGroup.Item><Link to=\"/tree\">GRAPH</Link></ListGroup.Item>*/}\n                {/*    <ListGroup.Item><Link to=\"/color\">COLORS</Link></ListGroup.Item>*/}\n                {/*</ListGroup>*/}\n\n                <Route path=\"/\" exact component={GraphUI}/>\n            </div>\n\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}