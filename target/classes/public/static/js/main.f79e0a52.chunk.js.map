{"version":3,"sources":["Pages/About.js","Pages/BSTTree.js","Pages/ColorButton.js","Pages/Color.js","App.js","reportWebVitals.js","index.js"],"names":["About","SESSION_ID","undefined","API_ROOT","PATH_ORIGIN","PATH_DESTINATION","synthStack","midi","graphData","chordCount","loadGraphData","a","Math","floor","random","axios","get","resp","data","destination","loadMidiData","Midi","fromUrl","renderGraph","setState","state","loading","initAudio","startSeqence","Tone","bpm","value","start","console","log","length","unsync","curSynth","push","toDestination","volume","track","tracks","notes","curTime","i","time","duration","triggerAttackRelease","name","scheduleOnce","uuid","divStyle","color","nodes","links","myConfig","initialZoom","height","width","node","labelProperty","labelText","renderLabel","size","highlightStrokeColor","link","highlightColor","this","style","onClick","id","config","React","Component","containerStyles","BSTTree","props","createNewNode","val","toString","children","attributes","left","right","cloneTree","root","newNode","c1","index","c2","componentDidUpdate","componentDidMount","treeData","cloned","clonedTree","JSON","parse","stringify","dimensions","treeContainer","getBoundingClientRect","tree","translate","x","y","handleSubmit","event","preventDefault","post","handleChange","bind","target","ref","tc","orientation","collapsible","onSubmit","type","onChange","ColorButton","bgcolor","handleColorChange","Color","colorRes","colors","ListGroup","map","c","App","className","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f79e0a52.chunk.js","sourcesContent":["import React from 'react';\nimport { Graph } from \"react-d3-graph\";\nimport axios from \"axios\";\nimport * as Tone from 'tone'\nimport uuid from 'react-uuid'\nimport { Midi } from '@tonejs/midi'\n\nexport class About extends React.Component {\n    SESSION_ID = undefined;\n    API_ROOT = \"http://localhost:8080/\"\n    PATH_ORIGIN = 0;\n    PATH_DESTINATION = 83;\n\n    constructor() {\n        super();\n\n        this.SESSION_ID = uuid();\n\n\n\n\n\n\n\n        this.state = {\n            divStyle: {\n                color: 'blue',\n            },\n            loading: true,\n            data:{\n                nodes: [\n                    {\n                    \"id\": 99,\n                    \"hkey\": \"as\",\n                    \"note\": \"as\",\n                    \"chord\": \"maj7\",\n                    \"keyAndNote\": \"as,as-maj7\",\n                    \"color\": \"pink\",\n                    \"labelText\": \"as,as-maj7\"\n                },\n\n                ],\n                links: [],\n            },\n            myConfig: {\n                initialZoom: 1,\n                height: 900,\n                width: 1200,\n                //nodeHighlightBehavior: true,\n                node: {\n                    labelProperty: (node) => {\n                        return node.labelText\n                    },\n                    renderLabel: true,\n                    size: 120,\n                    highlightStrokeColor: \"black\",\n                },\n                link: {\n                    highlightColor: \"lightblue\",\n                },\n            }\n        }\n    }\n\n\n\n\n    synthStack = []\n    midi = undefined;\n    graphData = {}\n    chordCount = 0\n\n    loadGraphData = async () => {\n        let max = 83;\n        let min = 0;\n        this.PATH_DESTINATION = Math.floor(Math.random() * (max - min + 1) + min);\n\n        let resp = await axios.get(`${this.API_ROOT}graph/${this.SESSION_ID}/${this.PATH_ORIGIN}/${this.PATH_DESTINATION}`)\n        this.graphData = resp.data;\n        this.PATH_ORIGIN = resp.data.destination;\n    }\n\n    loadMidiData = async () => {\n        this.midi = await Midi.fromUrl(this.graphData.midi);\n    }\n\n    renderGraph = async () => {\n        this.setState( {...this.state, data: this.graphData, loading: false})\n    }\n\n    initAudio = async () => {\n        await this.loadGraphData();\n        await this.loadMidiData();\n        await this.startSeqence();\n        await this.renderGraph();\n\n        Tone.Transport.bpm.value = 60\n        Tone.Transport.start();\n\n    }\n\n    startSeqence = async () => {\n        // Tone.Transport.stop()\n        // Tone.Transport.seconds = 0;\n\n\n        console.log(\"START-SEQUENCE\")\n        if(this.synthStack.length > 0) {\n            console.log('this.synthStack.length', this.synthStack.length)\n            this.synthStack[this.synthStack.length-1].unsync();\n            //this.synthStack[this.synthStack.length-1].dispose();\n        }\n\n        let curSynth = new Tone.PolySynth(Tone.AMSynth);\n        this.synthStack.push(curSynth);\n\n        curSynth.toDestination();\n        curSynth.volume.value = -20;\n\n        const track = this.midi.tracks[0];\n        const notes = track.notes\n\n\n        //let chordCount = 0;\n        let curTime = -1;\n        for(let i = 0; i < notes.length; i++){\n           if(i == notes.length-1) {\n               console.log(\"NOTE TIME: \", notes[i])\n               console.log(\"NOTE TIME: \", notes[i].time)\n               console.log(\"NOTE DUR: \", notes[i].duration)\n           }\n\n           if(notes[i].time !== curTime){\n               curTime = notes[i].time;\n               this.chordCount++;\n           }\n\n           curSynth.triggerAttackRelease(notes[i].name, notes[i].duration, Tone.now() + notes[i].time, 0.5)\n        }\n\n\n\n        //the control changes are an object\n        //the keys are the CC number\n        //track.controlChanges[64]\n        //they are also aliased to the CC number's common name (if it has one)\n        // track.controlChanges.sustain.forEach(cc => {\n        //     // cc.ticks, cc.value, cc.time\n        // })\n\n        // var tremolo = new Tone.Tremolo(4, 0.75).toDestination().start();\n        // var phaser = new Tone.Phaser({\n        //     \"frequency\" : 6,\n        //     \"octaves\" : 5,\n        //     \"baseFrequency\" : 1000\n        // }).toMaster();\n        // const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n        // const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n        //\n        // synth.chain(pingPong, autoWah, phaser, tremolo)\n\n        //alert(notes.length)\n\n        // Tone.Transport.scheduleOnce(async () => {\n        //     console.log(\"Half FINISHED\")\n        //     //START LOADING THE GRAPH DATA HALFWAY THROUGH CURRENT PROGRESSION\n        //     await this.loadGraphData();\n        // }, (Tone.now() + notes[notes.length-1].time + notes[notes.length-1].duration) / 2)\n\n        // Tone.Transport.scheduleOnce(async () => {\n        //     alert(\"FINISHED\")\n        //     //START LOADING THE GRAPH DATA HALFWAY THROUGH CURRENT PROGRESSION\n        //     await this.loadGraphData();\n        // }, (Tone.now() + notes[notes.length-1].time) + notes[notes.length-1].duration))\n\n        console.log(\"TIME.NOW(): \", Tone.now())\n        console.log(\"CHORD COUNT: \", this.chordCount)\n\n        Tone.Transport.scheduleOnce(async () => {\n            console.log(\"LOAD DATA\")\n            //START THE NEW PROGRESSION AT THE END OF THE LAST\n            await this.loadGraphData();\n            await this.loadMidiData();\n\n\n        }, new Tone.Time((this.chordCount - 1) + \":0:0\"));\n\n        Tone.Transport.scheduleOnce(async () => {\n            //START THE NEW PROGRESSION AT THE END OF THE LAST\n            console.log(\"ALL FINISHED\")\n\n            await this.startSeqence();\n            await this.renderGraph();\n        }, new Tone.Time((this.chordCount) + \":0:0\"));\n\n\n\n\n\n\n\n           //  console.log(\"midi\", midi)\n           //\n           //  // make sure you set the tempo before you schedule the events\n           //  Tone.Transport.bpm.value = 60\n           //\n           //\n           //  // pass in the note events from one of the tracks as the second argument to Tone.Part\n           //  var midiPart = new Tone.Part(function(time, note) {\n           //\n           //      //use the events to play the synth\n           //      synth.triggerAttackRelease(note.name, note.duration, time, 0.5)\n           //\n           //  }, midi.tracks[0].notes).start()\n           //\n\n\n\n    }\n\n    async componentDidMount() {\n        let max = 83;\n        let min = 0;\n        this.PATH_DESTINATION = Math.floor(Math.random() * (max - min + 1) + min);\n\n        let resp = await axios.get(`${this.API_ROOT}graph/${this.SESSION_ID}/${this.PATH_ORIGIN}/${this.PATH_DESTINATION}`);\n        this.PATH_ORIGIN = resp.data.destination;\n\n        this.setState({...this.state, data: resp.data, loading: false})\n    }\n\n    render() {\n        return <div style={this.state.divStyle}>\n            <button onClick={this.initAudio}>\n                Click me\n            </button>\n            {\n                this.state.loading ? <div>Loading...</div> : <Graph\n                    id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n                    data={this.state.data}\n                    config={this.state.myConfig}\n                />\n            }\n        </div>\n    }\n}\n\n\n\n","import React from 'react';\nimport axios from 'axios';\nimport Tree from 'react-d3-tree';\n\nconst containerStyles = {\n    'width': '100%',\n    'height': '80vh',\n}\n\nexport class BSTTree extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: undefined,\n            tree: [{\n                name: '100',\n                children: []}\n                ],\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    createNewNode = (val) => {\n        return {\n            name: val.toString(),\n            children: [],\n            attributes: {\n            },\n            left: undefined,\n            right: undefined,\n        }\n    }\n\n    cloneTree = (root) => {\n        if (root == null) {\n            return null;\n        }\n\n        let newNode = this.createNewNode(root.value);\n        newNode.left = this.cloneTree(root.left);\n        let c1 = this.cloneTree(root.left);\n        let index =0;\n        if(c1) {\n            newNode.children[index] = c1\n            index++;\n        }\n        newNode.right = this.cloneTree(root.right);\n        let c2 = this.cloneTree(root.right);\n        if(c2){\n            newNode.children[index] = c2\n        }\n\n        return  newNode;\n    }\n\n    // bfTraveral = (node) => {\n    //     console.log(node)\n    //\n    //     let queue = []\n    //     queue.push(node)\n    //\n    //     while (queue.length > 0){\n    //         let curNode = queue.shift()\n    //         console.log(curNode.value)\n    //\n    //         if(curNode.left != undefined) {\n    //             queue.push(curNode.left)\n    //         }\n    //\n    //         if(curNode.right != undefined){\n    //             queue.push(curNode.right)\n    //         }\n    //    }\n    //\n    //    console.log('copyTree', this.copyTree)\n    // }\n\n\n    componentDidUpdate = async () => {\n        console.log('state was set')\n    }\n\n    componentDidMount = async () => {\n\n        const treeData = await axios.get(`http://localhost:8080/tree`);\n        let cloned = this.cloneTree(treeData.data.root)\n        let clonedTree = [JSON.parse(JSON.stringify(cloned))];\n        const dimensions = this.treeContainer.getBoundingClientRect();\n        this.setState({\n            ...this.state,\n            tree: clonedTree,\n            translate: {\n                x: dimensions.width / 2,\n                y: dimensions.height / 5,\n            }\n        });\n    }\n\n    handleChange(event) {\n        this.setState({...this.state, value: event.target.value});\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const addNodeResp = await axios.post(`http://localhost:8080/tree`, {'data': this.state.value});\n\n        const treeData = await axios.get(`http://localhost:8080/tree`);\n        let cloned = this.cloneTree(treeData.data.root)\n        let clonedTree = [JSON.parse(JSON.stringify(cloned))];\n        const dimensions = this.treeContainer.getBoundingClientRect();\n        this.setState({\n            ...this.state,\n            tree: clonedTree,\n            translate: {\n                x: dimensions.width / 2,\n                y: dimensions.height / 5,\n            }\n        });\n    }\n\n    render(){\n        return (\n            <div style={containerStyles} ref={tc => (this.treeContainer = tc)}>\n                <Tree data={this.state.tree} orientation={'vertical'} collapsible={false} translate={this.state.translate}  />\n\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        ADD NODE:\n                        <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport class ColorButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    componentDidMount = async () => {\n        //alert(this.props.color)\n    }\n\n    // handleColorChange = (color) => {\n    //     this.setState({...this.state, bgcolor: color})\n    // }\n\n    render(){\n        let color = {'background-color': this.state.bgcolor, 'height': '100vh',}\n        return  (<button onClick={() => { this.props.handleColorChange(this.props.color) }}>\n            {this.props.color}\n            </button>);\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport {ColorButton} from './ColorButton'\n\nexport class Color extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            colors: ['pink'],\n            bgcolor: 'grey',\n        };\n    }\n\n    componentDidMount = async () => {\n        const colorRes = await axios.get(`http://localhost:8080/colors`);\n\n        if(!colorRes.data){\n            return\n        }\n\n        this.setState({...this.state, colors: colorRes.data})\n    }\n\n    handleColorChange = (color) => {\n        this.setState({...this.state, bgcolor: color})\n    }\n\n    render(){\n        let color = {'backgroundColor': this.state.bgcolor, 'height': '100vh',}\n        return  <div style={color}>\n            {JSON.stringify(this.state.colors)}\n            <ListGroup>\n                {this.state.colors.map((c) => {return <ColorButton key={c} color={c} handleColorChange={this.handleColorChange} />})}\n\n            </ListGroup>\n        </div>\n    }\n}","import './App.css';\nimport {Route, BrowserRouter as Router, Link} from \"react-router-dom\";\nimport {About} from './Pages/About'\nimport {BSTTree} from './Pages/BSTTree'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport {Color} from \"./Pages/Color\";\n\nfunction App() {\n  return (\n      <Router>\n          <div className=\"App\">\n              {/*<ListGroup horizontal>*/}\n              {/*    <ListGroup.Item><Link to=\"/\">HOME</Link></ListGroup.Item>*/}\n              {/*    <ListGroup.Item><Link to=\"/tree\">GRAPH</Link></ListGroup.Item>*/}\n              {/*    <ListGroup.Item><Link to=\"/color\">COLORS</Link></ListGroup.Item>*/}\n              {/*</ListGroup>*/}\n\n              <Route path=\"/\" exact component={About}/>\n              <Route path=\"/tree\" exact component={BSTTree}/>\n              <Route path=\"/color\" exact component={Color}/>\n          </div>\n\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}